import{_ as a,o as s,c as n,e}from"./app-CutjyUmw.js";const i={},l=e(`<h1 id="git命令集合" tabindex="-1"><a class="header-anchor" href="#git命令集合" aria-hidden="true">#</a> GIT命令集合</h1><h2 id="一-日常使用频率较高的命令" tabindex="-1"><a class="header-anchor" href="#一-日常使用频率较高的命令" aria-hidden="true">#</a> 一.日常使用频率较高的命令</h2><h3 id="_1-设置用户名和邮箱" tabindex="-1"><a class="header-anchor" href="#_1-设置用户名和邮箱" aria-hidden="true">#</a> 1. 设置用户名和邮箱</h3><p>(这里设置的是你要登录git远程仓库使用的用户名和邮箱，如果公司内部使用该方式统计员工有没有好好干活的话这个必须设置对，不然的话，你的提交数据无法正确绑定哦！)</p><ul><li>设置当前机器全局用户及邮箱</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">&quot;userName&quot;</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">&quot;email&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>设置当前项目下使用的用户名和邮箱 (如果你要向多个不同服务商的远程git库提交代码，而且每一个使用的用户名密码不一致的话，可以设置当前项目独立的用户名及邮箱)</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config user.name <span class="token string">&quot;userName&quot;</span>
<span class="token function">git</span> config user.email <span class="token string">&quot;email&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-git代码克隆-提交-推送-拉取" tabindex="-1"><a class="header-anchor" href="#_2-git代码克隆-提交-推送-拉取" aria-hidden="true">#</a> 2. git代码克隆，提交，推送，拉取</h3><ul><li>git代码clone (第二种为ssh的方式去clone代码，使用这种方式前需先配置好对应的ssh-key在对应的用户设置中)</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone http://url
or
<span class="token function">git</span> clone git@url
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>代码提交 (add . 是降当前目录下所有有变动的文件纳入版本管理，一般不推荐这样，所以add的时候你只需要add你想要提交的文件全路径即可，如果文件很多觉得这样很不方便可以使用三方工具作为辅助，现在市面上常见的ide都支持这些操作)</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;message&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>代码拉取 (意为降远程分支拉取到当前本地分支进行合并，如果本地和远程分支名称一致直接使用 git pull即可)</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> pull <span class="token operator">&lt;</span>远程主机名，一般为origin<span class="token operator">&gt;</span> 远程分支名称:本地分支名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>代码推送</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push <span class="token operator">&lt;</span>远程主机名，一般为origin<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>本地分支名称<span class="token operator">&gt;</span>:<span class="token operator">&lt;</span>远程分支名称<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,17),t=[l];function d(r,c){return s(),n("div",null,t)}const u=a(i,[["render",d],["__file","git_cmd.html.vue"]]);export{u as default};
