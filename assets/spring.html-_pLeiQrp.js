import{_ as i,o as e,c as l,e as a}from"./app-CutjyUmw.js";const r={},n=a('<h3 id="ioc" tabindex="-1"><a class="header-anchor" href="#ioc" aria-hidden="true">#</a> IOC</h3><ol><li>控制反转，将对象的实例化交由spring处理，使用时直接调用即可。</li><li>使用依赖注入的方式实现，3种注入方式：setter注入，构造器注入，接口注入</li><li>把对象的创建、初始化、销毁交给spring来管理，而不是由开发者控制，实现控制反转。</li></ol><h3 id="aop" tabindex="-1"><a class="header-anchor" href="#aop" aria-hidden="true">#</a> AOP</h3><ol><li>Spring支持面向切面的编程，并且把应用业务逻辑和系统服务分开。</li><li>面向切面的编程，或AOP，是一种编程技术，允许程序模块化横向切割关注点，或横切典型的责任划分，如日志和事务管理。</li><li>AOP核心就是切面，它将多个类的通用行为封装成可重用的模块，该模块含有一组API提供横切功能。比如，一个日志模块可以被称作日志的AOP切面。根据需求的不同，一个应用程序可以有若干切面。在SpringAOP中，切面通过带有@Aspect注解的类实现。</li></ol><h3 id="spring-bean-作用域" tabindex="-1"><a class="header-anchor" href="#spring-bean-作用域" aria-hidden="true">#</a> spring bean 作用域</h3><ol><li>singleton（单例模式）</li><li>prototype（原型模式）</li><li>request</li><li>session</li><li>global session</li></ol>',6),s=[n];function o(t,c){return e(),l("div",null,s)}const d=i(r,[["render",o],["__file","spring.html.vue"]]);export{d as default};
